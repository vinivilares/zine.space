generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  senha           String
  nickname        String            @unique
  nome            String
  dt_nascimento   DateTime
  biografia       String?
  imagem          String?
  tiktok          String?
  instagram       String?
  twitter         String?
  QuerVer         QuerVer[]
  Assistidos      Assistidos[]
  Recomendados    Recomendados[]
  NaoRecomendados NaoRecomendados[]
  Notificacoes    Notificacoes[]
  Reviews         Reviews[]
  seguidores      Users[]           @relation("UserFollows")
  seguindo        Users[]           @relation("UserFollows")
}

model Assistidos {
  id      Int       @id @default(autoincrement())
  idFilme String    @unique
  idUser  Users[]
  Reviews Reviews[]
}

model Recomendados {
  id      Int     @id @default(autoincrement())
  idFilme String  @unique
  idUser  Users[]
}

model NaoRecomendados {
  id      Int     @id @default(autoincrement())
  idFilme String  @unique
  idUser  Users[]
}

model QuerVer {
  id      Int     @id @default(autoincrement())
  idFilme String  @unique
  idUser  Users[]
}

model Notificacoes {
  id         Int      @id @default(autoincrement())
  idSeguidor Int
  createdAt  DateTime @default(now())
  idUser     Users[]
}

model Reviews {
  id           Int        @id @default(autoincrement())
  usersId      Int
  review       String
  nota         Float
  spoiler      Boolean
  assistidosId Int
  data         DateTime   @default(now())
  idUser       Users      @relation(fields: [usersId], references: [id], onDelete: Cascade)
  idFilme      Assistidos @relation(fields: [assistidosId], references: [id])

  @@index([usersId])
  @@index([assistidosId])
}

model AssistidosToUsers {
  A Int
  B Int

  @@unique([A, B], map: "_AssistidosToUsers_AB_unique")
  @@index([B], map: "_AssistidosToUsers_B_index")
  @@map("_AssistidosToUsers")
}

model NaoRecomendadosToUsers {
  A Int
  B Int

  @@unique([A, B], map: "_NaoRecomendadosToUsers_AB_unique")
  @@index([B], map: "_NaoRecomendadosToUsers_B_index")
  @@map("_NaoRecomendadosToUsers")
}

model NotificacoesToUsers {
  A Int
  B Int

  @@unique([A, B], map: "_NotificacoesToUsers_AB_unique")
  @@index([B], map: "_NotificacoesToUsers_B_index")
  @@map("_NotificacoesToUsers")
}

model QuerVerToUsers {
  A Int
  B Int

  @@unique([A, B], map: "_QuerVerToUsers_AB_unique")
  @@index([B], map: "_QuerVerToUsers_B_index")
  @@map("_QuerVerToUsers")
}

model RecomendadosToUsers {
  A Int
  B Int

  @@unique([A, B], map: "_RecomendadosToUsers_AB_unique")
  @@index([B], map: "_RecomendadosToUsers_B_index")
  @@map("_RecomendadosToUsers")
}

model UserFollows {
  A Int
  B Int

  @@unique([A, B], map: "_UserFollows_AB_unique")
  @@index([B], map: "_UserFollows_B_index")
  @@map("_UserFollows")
}
